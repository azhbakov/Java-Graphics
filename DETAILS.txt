Структура программы следующая:

Есть пакет game_of_life, содержащий логику игры, воплощающий модель. Главный класс - Game, там хранится поле, просчитывается следующий шаг симуляции, содеражатся также параметры представления, такие как размер клетки, толщина границы и.т.д. Загрузка модели из файла инициируется методом loadFile этого же класса. FileInitializer считывает сам файл и возвращает GameSettings - набор данных для воссоздания состояния игры из файла.

Пакет view содержит графическое представление. Главный класс - GameWindow, наследующий JFrame (на самом деле он наследует MainWindow, содержащий дополнительные методы для удобного заполнения меню). В GameWindow описаны Actions для всех кнопок, добавляется toolBar и statusBar. Actions обычно вызывают соответствующие методы модели. GameWindow является Observer для Game, чтобы отслеживать разрешения на использование кнопок Step и Clear (во время Run они должны быть отключены).
Основную часть игрового окна занимает HexGrid, содержащийся в GameWindow. Он является JPanel и содержит логику отрисовки гексагонального поля. Он является Observer для Game и получает оттуда данные о состоянии клеток. Статический HexGenerator выдает Hex, содержащий BufferedImage и параметры шестиугольника. HexGrid использует этот Hex как образец и отрисовывает соответствующие шестиугольники. При изменении параметров шестиугольника генерируется новый Hex.
Как происходит генерация Hex - рассчитываются основные параметры шестиугольника, создается BufferedImage, на нем рисуется граница шестиугольника, согласно алгоритму Брезенхема (реализовано с помощью класса BresenhamIterator - помогает пошагово рисовать сразу две стороны границы), затем span alrogithm заполняет внутреннюю область.